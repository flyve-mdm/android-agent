apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.3'
    defaultConfig {
        applicationId "org.flyve.mdm.agent"
        minSdkVersion 16
        targetSdkVersion 16
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dexOptions {
        preDexLibraries true
        maxProcessCount 8
    }

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        multiDexEnabled true
    }
}

repositories {
    maven {
        url "https://repo.eclipse.org/content/repositories/paho-releases/"
    }
    maven {
        url 'https://dl.bintray.com/flyve-mdm/inventory'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile('org.eclipse.paho:org.eclipse.paho.android.service:1.0.2') {
        exclude module: 'support-v4'
        transitive = true
    }

    compile 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.1.1'
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.android.support:design:23.1.1'
    compile 'com.android.support:support-v4:23.1.1'
    compile 'com.madgag.spongycastle:core:1.54.0.0'
    compile 'com.madgag.spongycastle:prov:1.54.0.0'
    compile 'com.madgag.spongycastle:pkix:1.54.0.0'
    compile 'com.orhanobut:logger:2.1.0'
    compile 'com.google.code.gson:gson:2.8.1'
    compile 'com.flyvemdm:inventory:1.0.2@aar'
}

import java.util.regex.Pattern
import groovy.json.JsonSlurper

task increaseVersionCode {
    doLast {
        def manifestFile = file("src/main/AndroidManifest.xml")
        def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
        def manifestText = manifestFile.getText()
        def matcher = pattern.matcher(manifestText)
        matcher.find()
        def versionCode = Integer.parseInt(matcher.group(1))
        def manifestContent = matcher.replaceAll("versionCode=\"" + ++versionCode + "\"")
        println "Version code: " + versionCode
        manifestFile.write(manifestContent)
    }
}

task incrementVersionName {
    doLast {
        def manifestFile = file("src/main/AndroidManifest.xml")
        def patternVersionNumber = Pattern.compile("versionName=\"(\\d+)\\.(\\d+)\\.(\\d+)\"")
        def manifestText = manifestFile.getText()
        def matcherVersionNumber = patternVersionNumber.matcher(manifestText)
        matcherVersionNumber.find()

        def inputFile = new File("package.json")
        def json = new JsonSlurper().parseText(inputFile.text)
        def mNextVersionName = json.version //This will return version number

        def manifestContent = matcherVersionNumber.replaceAll("versionName=\"" + mNextVersionName + "\"")
        println "Version name: " + mNextVersionName
        manifestFile.write(manifestContent)
    }
}